// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../routes/__root'
import { Route as IndexRouteImport } from './../routes/index'
import { Route as EcosystemIndexRouteImport } from './../routes/ecosystem/index'
import { Route as DocsIndexRouteImport } from './../routes/docs/index'
import { Route as CommunityIndexRouteImport } from './../routes/community/index'
import { Route as BlogIndexRouteImport } from './../routes/blog/index'
import { Route as AboutIndexRouteImport } from './../routes/about/index'
import { Route as DocsWhitepaperRouteImport } from './../routes/docs/whitepaper'
import { Route as DocsNodeSetupRouteImport } from './../routes/docs/node-setup'
import { Route as DocsGovernanceRouteImport } from './../routes/docs/governance'
import { Route as DocsGettingStartedRouteImport } from './../routes/docs/getting-started'
import { Route as DocsDevelopersRouteImport } from './../routes/docs/developers'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EcosystemIndexRoute = EcosystemIndexRouteImport.update({
  id: '/ecosystem/',
  path: '/ecosystem/',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsIndexRoute = DocsIndexRouteImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityIndexRoute = CommunityIndexRouteImport.update({
  id: '/community/',
  path: '/community/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogIndexRoute = BlogIndexRouteImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutIndexRoute = AboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsWhitepaperRoute = DocsWhitepaperRouteImport.update({
  id: '/docs/whitepaper',
  path: '/docs/whitepaper',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsNodeSetupRoute = DocsNodeSetupRouteImport.update({
  id: '/docs/node-setup',
  path: '/docs/node-setup',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsGovernanceRoute = DocsGovernanceRouteImport.update({
  id: '/docs/governance',
  path: '/docs/governance',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsGettingStartedRoute = DocsGettingStartedRouteImport.update({
  id: '/docs/getting-started',
  path: '/docs/getting-started',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsDevelopersRoute = DocsDevelopersRouteImport.update({
  id: '/docs/developers',
  path: '/docs/developers',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/docs/developers': typeof DocsDevelopersRoute
  '/docs/getting-started': typeof DocsGettingStartedRoute
  '/docs/governance': typeof DocsGovernanceRoute
  '/docs/node-setup': typeof DocsNodeSetupRoute
  '/docs/whitepaper': typeof DocsWhitepaperRoute
  '/about': typeof AboutIndexRoute
  '/blog': typeof BlogIndexRoute
  '/community': typeof CommunityIndexRoute
  '/docs': typeof DocsIndexRoute
  '/ecosystem': typeof EcosystemIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/docs/developers': typeof DocsDevelopersRoute
  '/docs/getting-started': typeof DocsGettingStartedRoute
  '/docs/governance': typeof DocsGovernanceRoute
  '/docs/node-setup': typeof DocsNodeSetupRoute
  '/docs/whitepaper': typeof DocsWhitepaperRoute
  '/about': typeof AboutIndexRoute
  '/blog': typeof BlogIndexRoute
  '/community': typeof CommunityIndexRoute
  '/docs': typeof DocsIndexRoute
  '/ecosystem': typeof EcosystemIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/docs/developers': typeof DocsDevelopersRoute
  '/docs/getting-started': typeof DocsGettingStartedRoute
  '/docs/governance': typeof DocsGovernanceRoute
  '/docs/node-setup': typeof DocsNodeSetupRoute
  '/docs/whitepaper': typeof DocsWhitepaperRoute
  '/about/': typeof AboutIndexRoute
  '/blog/': typeof BlogIndexRoute
  '/community/': typeof CommunityIndexRoute
  '/docs/': typeof DocsIndexRoute
  '/ecosystem/': typeof EcosystemIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docs/developers'
    | '/docs/getting-started'
    | '/docs/governance'
    | '/docs/node-setup'
    | '/docs/whitepaper'
    | '/about'
    | '/blog'
    | '/community'
    | '/docs'
    | '/ecosystem'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/docs/developers'
    | '/docs/getting-started'
    | '/docs/governance'
    | '/docs/node-setup'
    | '/docs/whitepaper'
    | '/about'
    | '/blog'
    | '/community'
    | '/docs'
    | '/ecosystem'
  id:
    | '__root__'
    | '/'
    | '/docs/developers'
    | '/docs/getting-started'
    | '/docs/governance'
    | '/docs/node-setup'
    | '/docs/whitepaper'
    | '/about/'
    | '/blog/'
    | '/community/'
    | '/docs/'
    | '/ecosystem/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocsDevelopersRoute: typeof DocsDevelopersRoute
  DocsGettingStartedRoute: typeof DocsGettingStartedRoute
  DocsGovernanceRoute: typeof DocsGovernanceRoute
  DocsNodeSetupRoute: typeof DocsNodeSetupRoute
  DocsWhitepaperRoute: typeof DocsWhitepaperRoute
  AboutIndexRoute: typeof AboutIndexRoute
  BlogIndexRoute: typeof BlogIndexRoute
  CommunityIndexRoute: typeof CommunityIndexRoute
  DocsIndexRoute: typeof DocsIndexRoute
  EcosystemIndexRoute: typeof EcosystemIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ecosystem/': {
      id: '/ecosystem/'
      path: '/ecosystem'
      fullPath: '/ecosystem'
      preLoaderRoute: typeof EcosystemIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/': {
      id: '/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community/': {
      id: '/community/'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/whitepaper': {
      id: '/docs/whitepaper'
      path: '/docs/whitepaper'
      fullPath: '/docs/whitepaper'
      preLoaderRoute: typeof DocsWhitepaperRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/node-setup': {
      id: '/docs/node-setup'
      path: '/docs/node-setup'
      fullPath: '/docs/node-setup'
      preLoaderRoute: typeof DocsNodeSetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/governance': {
      id: '/docs/governance'
      path: '/docs/governance'
      fullPath: '/docs/governance'
      preLoaderRoute: typeof DocsGovernanceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/getting-started': {
      id: '/docs/getting-started'
      path: '/docs/getting-started'
      fullPath: '/docs/getting-started'
      preLoaderRoute: typeof DocsGettingStartedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/developers': {
      id: '/docs/developers'
      path: '/docs/developers'
      fullPath: '/docs/developers'
      preLoaderRoute: typeof DocsDevelopersRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocsDevelopersRoute: DocsDevelopersRoute,
  DocsGettingStartedRoute: DocsGettingStartedRoute,
  DocsGovernanceRoute: DocsGovernanceRoute,
  DocsNodeSetupRoute: DocsNodeSetupRoute,
  DocsWhitepaperRoute: DocsWhitepaperRoute,
  AboutIndexRoute: AboutIndexRoute,
  BlogIndexRoute: BlogIndexRoute,
  CommunityIndexRoute: CommunityIndexRoute,
  DocsIndexRoute: DocsIndexRoute,
  EcosystemIndexRoute: EcosystemIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
